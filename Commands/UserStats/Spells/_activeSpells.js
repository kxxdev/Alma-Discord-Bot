import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  EmbedBuilder,
  StringSelectMenuBuilder,
} from 'discord.js';
import UserSpells from '../../../Models/UsersSpels/UserSpells.js';
import { SpellsActionTypes } from '../../../Config/spells-config.js';
import { CommandCustomError } from '../../CommandsError.js';

import { GetDesignConfig } from '../../../Config/design-config.js';
const DesignConfig = GetDesignConfig();

const command = async (interaction) => {
  // –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–∏.
  const { client, channel, member } = interaction;

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∫–æ–º–∞–Ω–¥—ã.
  const interactionValues = interaction.customId?.split('-') || '1-1-1';

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
  const page = Number(interactionValues[2]) || 1;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î.
  const userSpells = await UserSpells.get({ userId: member.id });

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å –∫–∞–∫–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Å—á–∏—Ç–∞—Ç—å –æ—Ä—É–∂–∏—è.
  const minIndex = (page - 1) * 5;

  // –ü–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  const textSpells = userSpells.getSpellsList({
    type: 'active',
  });

  // –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è —Å–µ–ª–µ–∫—Ç –º–µ–Ω—é.
  const selectMenuOptions = [];

  // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É.
  if (userSpells.spells.length === 0) {
    selectMenuOptions.push({
      label: `–ù–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π..`,
      description: `–í—ã –Ω–µ –∏–∑—É—á–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`,
      emoji: DesignConfig.emojis.denie,
      value: `none`,
    });
  }

  // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  else {
    for (let i = 0; i < userSpells.spells.length; i++) {
      const spell = userSpells.spells[i];

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
      const spellFromConfig = userSpells.getSpellConfig({ id: spell.id });

      // –ï—Å–ª–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤—ã–¥–∞–µ–º –æ—à–∏–±–∫—É.
      if (!spellFromConfig) {
        throw CommandCustomError(
          interaction,
          '–û—à–∏–±–∫–∞! –û–¥–Ω–æ –∏–∑ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–∏—Ä–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –±–æ–≥–∞–º –∑–∞ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.'
        );
      }

      selectMenuOptions.push({
        label: `${spellFromConfig.id} ${DesignConfig.emojis.textStar.repeat(
          spell.level
        )} | ${SpellsActionTypes[spellFromConfig.action]}`,
        description: `${spellFromConfig.description}\n`,
        emoji: DesignConfig.guildEmojis.actions[spellFromConfig.action],
        value: `${spell.id}`,
      });
    }
  }

  // –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç –º–µ–Ω—é.
  const selectMenuSpells = new ActionRowBuilder().addComponents(
    new StringSelectMenuBuilder()
      .setCustomId(`equipSpell-${member.id}`)
      .setPlaceholder(
        `${DesignConfig.emojis.equip} –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ..`
      )
      .addOptions(selectMenuOptions)
  );

  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
  const upgradeSpellsButton = new ButtonBuilder()
    .setCustomId(`upgradeSpellsButton-${member.id}`)
    .setLabel(`${DesignConfig.emojis.upgrade} –£–ª—É—á—à–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)
    .setStyle(ButtonStyle.Success);
  const buySpellsButton = new ButtonBuilder()
    .setCustomId(`buySpellsButton-${member.id}`)
    .setLabel(`${DesignConfig.emojis.sell} –ö—É–ø–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ`)
    .setStyle(ButtonStyle.Success);
  const buttons = new ActionRowBuilder().addComponents(
    upgradeSpellsButton,
    buySpellsButton
  );

  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
  if (minIndex != 0) {
    const prevPage = new ButtonBuilder()
      .setCustomId(`activeSpellsPrev-${member.id}-${page - 1}`)
      .setLabel('‚óÄÔ∏è')
      .setStyle(ButtonStyle.Secondary);

    buttons.addComponents(prevPage);
  }

  // –ï—Å–ª–∏ –æ—Ä—É–∂–∏–π –±–æ–ª—å—à–µ —á–µ–º –≤—ã–≤–µ–ª–æ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
  if (userSpells.spells.length > minIndex + 5) {
    const nextPage = new ButtonBuilder()
      .setCustomId(`activeSpellsNext-${member.id}-${page + 1}`)
      .setLabel('‚ñ∂Ô∏è')
      .setStyle(ButtonStyle.Secondary);

    buttons.addComponents(nextPage);
  }

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –º–µ–Ω—é.
  const upgradeAttrubutesButton = new ButtonBuilder()
    .setCustomId(`attributes-${member.id}`)
    .setLabel(`${DesignConfig.emojis.perks}`)
    .setStyle(ButtonStyle.Secondary);
  const inventoryButton = new ButtonBuilder()
    .setCustomId(`inventory-${member.id}`)
    .setLabel(`${DesignConfig.emojis.inventory}`)
    .setStyle(ButtonStyle.Secondary);
  const activeSpellsButton = new ButtonBuilder()
    .setCustomId(`activeSpells-${member.id}`)
    .setLabel(`${DesignConfig.emojis.update}`)
    .setStyle(ButtonStyle.Success);
  const menu = new ActionRowBuilder().addComponents(
    upgradeAttrubutesButton,
    inventoryButton,
    activeSpellsButton
  );

  const embed = new EmbedBuilder()
    .setTitle(
      `${DesignConfig.guildEmojis.spells} –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è ${DesignConfig.guildEmojis.spells}`
    )
    .setDescription(
      `–£ –≤–∞—Å \`${userSpells.manaStones}\` –º–∞–Ω–∞-–∫–∞–º–Ω–µ–π.
      
**–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è (${userSpells.activeSpells.length}/3):**
${textSpells}

üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º –∏–ª–∏ —É–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö üîΩ`
    )
    .setColor(DesignConfig.colors.spells)
    .setFooter({ text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page}` })
    .setThumbnail(member.displayAvatarURL())
    .setImage(DesignConfig.footer.purpleGifLineURL);

  // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ–µ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
  const ephemeral = channel.id != client.channelsConfig.spamChannelId;

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç.
  if (interaction.executeType === 'interactionCreate') {
    return await interaction
      .update({
        embeds: [embed],
        components: [menu, selectMenuSpells, buttons],
        ephemeral,
      })
      .catch(() => {
        interaction.message
          .edit({
            embeds: [embed],
            components: [menu, selectMenuSpells, buttons],
            ephemeral,
          })
          .catch();
      });
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç.
  await interaction
    .reply({
      embeds: [embed],
      components: [selectMenuSpells, buttons],
      ephemeral: false,
    })
    .catch((err) => console.log(err));
};

export default command;
